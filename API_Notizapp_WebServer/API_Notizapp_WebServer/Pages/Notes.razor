@using API_Notizapp_WebServer.Data;
@using System.Text.Json;
@using System.Text;
@inject NavigationManager navManager
@page "/"

<PageTitle>Notes</PageTitle>
<link href="/css/stylesheet.css" rel="stylesheet" />

<h1>Notes</h1>

<div class="page">
    <main>
        <article class="content px-4">

            @if (!edit)
            {
               @foreach(Notiz n in notizen)
               {
                    <div class='notificationBorder' >
                    
                        <div class="note">
                            <h5>@n.title</h5>
                            <p>@n.inhalt</p>
                            <br />
                        </div>
                
                        <div class="deleteButton">
                            <button @onclick="@(() => onDeleteClick(n))" runat='server'>Delete</button>
                            <button @onclick="@(() => onEditClick(n))" runat='server'>Edit</button>
                        </div>

                    </div>
                }
            }
            else
            {
                <input @bind="notiz.title" type="text" />
                <br />
                <textarea @bind="notiz.inhalt" type="text" />
                <br />
                <button @onclick="editNotiz">Edit Note</button>
                <br />
            }

        </article>
    </main>
</div>


@code {
    List<Notiz> notizen = new List<Notiz>();
    Notiz notiz = new Notiz();
    bool edit = false;


    protected override async Task OnInitializedAsync()
    {
        HttpClient client = new HttpClient();


        string data = client.GetStringAsync("http://localhost:4000/Notiz").Result;
        notizen = JsonSerializer.Deserialize<List<Notiz>>(data);
    }

    public void onDeleteClick(Notiz n)
    {
        notizen.Remove(n);
        DeleteNotes(n);
    }

    public void DeleteNotes(Notiz n)
    {
        HttpClient client = new HttpClient();

        string data = client.GetStringAsync("http://localhost:4000/Notiz").Result;
        var list = JsonSerializer.Deserialize<List<Notiz>>(data);


        if (n != null && list != null)
        {
            var response = client.DeleteAsync("http://localhost:4000/deleteNotiz/" + n.id);
        }
    }

    public void onEditClick(Notiz n)
    {
        notiz = n;
        if (!edit)
        {
            edit = true;
        }
        else
        {
            edit = false;
        }
    }

    public void editNotiz()
    {
        HttpClient client = new HttpClient();

        string data = client.GetStringAsync("http://localhost:4000/Notiz").Result;
        var list = JsonSerializer.Deserialize<List<Notiz>>(data);


        if (notiz != null && list != null)
        {
            var noteJson = JsonSerializer.Serialize(notiz);
            var requestContent = new StringContent(noteJson, Encoding.UTF8, "application/json");
            var response = client.PutAsync("http://localhost:4000/editNotiz/" + notiz.id, requestContent);
        }

        edit = false;
    }

}
